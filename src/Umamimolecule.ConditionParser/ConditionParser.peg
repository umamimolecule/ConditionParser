@namespace Umamimolecule
@classname ConditionParser
@ignorecase true
@using System.Globalization
@members
{
    private readonly ConditionParserHelper helper;
    
    public ConditionParser()
        : this(null)
    {
    }
     
    public ConditionParser(ConditionParserOptions options)
    {
        this.helper = new ConditionParserHelper(options ?? ConditionParserOptions.Default);
    }
}

start <bool>
    = _ value:or _ { (bool)value }

or <object> -memoize
    = left:or _ "or" _ right:and { (bool)left || (bool)right }
    / and

and <object> -memoize
    = left:and _ "and" _ right:expr { (bool)left && (bool)right }
    / expr
    
expr <object> -memoize
    = left:expr _ op:operator _ right:primary { this.helper.Evaluate(this.helper.ParseOperator(op), left, right) }
    / left:expr _ op:operator { this.helper.Evaluate(this.helper.ParseOperator(op), left) }
    / primary

primary <object>
    = null
    / boolean
    / date
    / datetime
    / string
    / double
    / integer
    / "(" _ or:or _ ")" { or }

boolean <object>
    = "true" { true }
    / "false" { false }

double <object>
    = value:("-"? [0-9]+ "." [0-9]+) { double.Parse(value, CultureInfo.InvariantCulture) }

integer <object>
    = value:("-"? [0-9]+) { int.Parse(value, CultureInfo.InvariantCulture) }

date <object>
    = "date" singleQuote value:(!singleQuote .)* singleQuote { DateOnly.Parse(string.Concat(value)) }
    / "date" doubleQuote value:(!doubleQuote .)* doubleQuote { DateOnly.Parse(string.Concat(value)) }

datetime <object>
    = "datetime" singleQuote value:(!singleQuote .)* singleQuote { DateTime.Parse(string.Concat(value), styles: DateTimeStyles.AdjustToUniversal) }
    / "datetime" doubleQuote value:(!doubleQuote .)* doubleQuote { DateTime.Parse(string.Concat(value), styles: DateTimeStyles.AdjustToUniversal) }

string <object>
    = singleQuote value:(singleQuoteStringContents)* singleQuote { string.Concat(value) }
    / doubleQuote value:(doubleQuoteStringContents)* doubleQuote { string.Concat(value) }

null <object> = "null" { null }

_ = [ \t\r\n]*

doubleQuote = "\""
 
singleQuote = "'"

escapedDoubleQuote = "\"\"" / "\\\""

escapedSingleQuote = "''" / "\\'"

singleQuoteStringContents
    = escapedSingleQuote { "'" }
    / !singleQuote .

doubleQuoteStringContents
    = escapedDoubleQuote { "\"" }
    / !doubleQuote .

operator
    = "Contains"
    / "DoesNotContain"
    / "DoesNotEndWith"
    / "DoesNotEqual" / "!="
    / "DoesNotMatchRegex"
    / "DoesNotStartWith"
    / "EndsWith"
    / "Equals" / "=="
    / "eq"
    / "GreaterThanOrEqual" / "ge" / ">="
    / "GreaterThan" / ">"
    / "gt"
    / "IsNull"
    / "IsNotNull"
    / "IsEmpty"
    / "IsNotEmpty"
    / "IsNullOrWhitespace"
    / "IsNotNullOrWhitespace"
    / "IsFalse"
    / "IsTrue"
    / "LessThanOrEqual" / "<="
    / "LessThan" / "lt" / "<"
    / "le"
    / "MatchesRegex"
    / "ne"
    / "StartsWith"
    